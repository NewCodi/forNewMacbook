A) Connect wifi

	//initialise_wifi();
	wifi_config_t wifiConfig = {
			.sta = {
				.ssid = "XXXXXXXXXX",
				.password = "XXXXXXXXXX",
			},
		};
	
	esp_wifi_disconnect();
	esp_wifi_set_mode(WIFI_MODE_STA);
	esp_wifi_set_config(ESP_IF_WIFI_STA, &wifiConfig);
	strcpy(WiFiSSID, (char*)wifiConfig.sta.ssid);
	vTaskDelay(100 / portTICK_RATE_MS);
	esp_wifi_connect();
	vTaskDelay(100 / portTICK_RATE_MS);





B) httpsRequest

bool httpsRequest(char* server, char* url, char* command)
{
	esp_err_t ret;
    int len, len2;
	int accLen = 0;
	bool isOK = true;

	sprintf(REQUEST, "POST %s HTTP/1.0\r\nUser-Agent: esp-idf/1.0 esp32\r\nConnection: close\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s", url, server, strlen(command), command);
	//ESP_LOGE(TAG, "%s", REQUEST);
	//esp_tls_cfg_t cfg = {
	//	.cacert_pem_buf  = (const uint8_t *)CERT_CA,
	//	.cacert_pem_bytes = sizeof(CERT_CA),
	//};
	esp_tls_cfg_t cfg = {0};
	ESP_LOGI(TAG, "AA>>>>>");
			
	//struct esp_tls *tls = esp_tls_conn_http_new(WEB_URL1, &cfg);
	struct esp_tls *tls = esp_tls_conn_http_new(url, &cfg);
	//struct esp_tls *tls = esp_tls_conn_http_new(WEB_URL3, &cfg);
	//struct esp_tls *tls = esp_tls_conn_new(WEB_SERVER, sizeof(WEB_SERVER), 29500, &cfg);
	
	if(tls != NULL) {
		ESP_LOGI(TAG, "Connection established...");
	} else {
		//ESP_LOGE(APP_TAG, "Connection failed... %d/%d", strlen(CERT_CA), sizeof(CERT_CA));
		ESP_LOGE(TAG, "Connection failed...");
		isOK = false;
		goto exit;
	}
	
	ESP_LOGI(TAG, "BB>>>>>");
	size_t written_bytes = 0;
	do {
		ret = esp_tls_conn_write(tls, 
								 REQUEST + written_bytes, 
								 strlen(REQUEST) - written_bytes);
		if (ret >= 0) {
			ESP_LOGI(TAG, "%d bytes written", ret);
			written_bytes += ret;
		} else if (ret != MBEDTLS_ERR_SSL_WANT_READ  && ret != MBEDTLS_ERR_SSL_WANT_WRITE) {
			ESP_LOGE(TAG, "esp_tls_conn_write  returned 0x%x", ret);
			isOK = false;
			goto exit;
		}
	} while(written_bytes < strlen(REQUEST));

	ESP_LOGI(TAG, "CC>>>>>");
	ESP_LOGI(TAG, "Reading HTTP response...");

	do
	{
		len = sizeof(buf) - 1;
		bzero(buf, sizeof(buf));
		ret = esp_tls_conn_read(tls, (char *)buf, len);
		
		if(ret == MBEDTLS_ERR_SSL_WANT_WRITE  || ret == MBEDTLS_ERR_SSL_WANT_READ)
		{
			ESP_LOGI(TAG, "MBEDTLS_ERR_SSL_WANT");
			continue;
		}
		
		if(ret < 0)
		{
			//putchar('\n');
			ESP_LOGE(TAG, "esp_tls_conn_read  returned -0x%x", -ret);
			break;
		}

		if(ret == 0)
		{
			//putchar('\n');
			ESP_LOGI(TAG, "connection closed");
			break;
		}

		len = ret;
		buf[len] = 0;
		//putchar('\n');
		//printf("%s", buf);
		ESP_LOGI(TAG, "%d bytes read", len);
		
		if (accLen == 0)
		{
			char* ptr = strstr(buf, "{\"Data\"");
			if (ptr != NULL)
			{
				len2 = len - (ptr - buf);
				if (len2 > 0)
				{
					memcpy(REQUEST, ptr, len2);
					accLen = len2;
					//printf(">>>>>>>>>>>>>>>>>>%d", accLen);
				}
			}
		}
		else
		{
			memcpy(REQUEST+accLen, buf, len);
			accLen += len;
		}
		
		/* Print response directly to stdout as it is read */
		//for(int i = 0; i < len; i++) {
		//	putchar(buf[i]);
		//}
	} while(1);

exit:
	ESP_LOGI(TAG, "DD>>>>>");
	esp_tls_conn_delete(tls);    
